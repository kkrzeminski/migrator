buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'net.saliman:gradle-liquibase-plugin:1.0.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext.liquibaseVersion = '3.6.0'
ext.commonsCliVersion = '1.3.1'
ext.logbackVersion = '1.1.3'
ext.slf4jVersion = '1.7.12'
ext.groovyVersion = '2.4.15'

def schema = 'dev'

project(':dbschema-scripts') {
    apply plugin: 'liquibase'
    apply plugin: 'java'

    description = 'Database scripts'

    configurations {
        liquibaseRuntime
    }

    dependencies {
    }

    liquibase {
        activities {
            main {
                changeLogFile "${projectDir}/src/main/resources/pl/company/product/changelog/db.changelog-master.xml"
                url 'jdbc:DRIVER:thin:@//IP:1521/SID'
                username schema
                password schema
                classpath configurations.liquibaseRuntime.asPath
                outputDefaultSchema false
                outputDefaultCatalog false
                outputFile "${buildDir}/updateScript.sql"
            }
        }
    }
}

project(':dbschema-migrator-tool') {
    apply plugin: 'java'
    apply plugin: 'groovy'
    dependencies {
        compile "org.liquibase:liquibase-core:${liquibaseVersion}"
        compile "commons-cli:commons-cli:${commonsCliVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile "ch.qos.logback:logback-core:${logbackVersion}"
        compile("org.slf4j:slf4j-api:${slf4jVersion}") { transitive = false }
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    }
}

project(':dbschema-migrator-package') {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        classifier = 'shadow'
    }

    dependencies {
        compile project(':dbschema-scripts')
        compile project(':dbschema-migrator-tool')
    }

    ['prod', 'test', 'dev'].unique().each { dbEnv ->
        def taskGroup = "Database migration $dbEnv"
        ['updateSQL', 'update', 'clearCheckSums'].each { migrateCommand ->
            def taskName = 'migrate' + camelize(dbEnv) + camelize(migrateCommand)
            task "$taskName"(type: JavaExec, dependsOn: 'build') {
                group = taskGroup
                main = 'migrator.Migrator'
                classpath = configurations.runtime
                args = ['-changeLogFile', "pl/company/product/changelog/db.changelog-master.xml",
                        '-defaultsFile', "${projectDir}/src/main/resources/${dbEnv}_environment.properties",
                        "-$migrateCommand"]
            }
        }
        ['rollback'].each { migrateCommand ->
            def taskName = 'migrate' + camelize(dbEnv) + camelize(migrateCommand)
            task "$taskName"(type: JavaExec, dependsOn: 'build') {
                group = taskGroup
                main = 'migrator.Migrator'
                classpath = configurations.runtime
                args = ['-changeLogFile', "pl/company/product/changelog/db.changelog-master.xml",
                        '-defaultsFile', "${projectDir}/src/main/resources/${dbEnv}_environment.properties",
                        "-$migrateCommand", '9999']
            }
        }
    }

    build.dependsOn 'shadowJar'

    jar {
        manifest {
            attributes 'Main-Class': 'migrator.Migrator'
        }
        exclude('*environment.properties')
    }
}

private static String camelize(String s) { s.substring(0, 1).toUpperCase() + s.substring(1) }